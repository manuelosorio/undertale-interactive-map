"use strict";

/**
  * Version: 1.0
  * Author: Manuel Osorio
  * Author URL: https://manuelosorio.me
  *
*/
var $audio = $('#audio'),
    $volumeIcon = $('#volumeIcon'),
    $player = $('.player'),
    $routerContainer = $('.router--container'),
    $menu = $('.nav--menu');
var $map = undefined;
$(document).ready(function () {
  routes();
  var $audio = $('#audio'),
      $muteButton = $('.icon'),
      $volumeIcon = $('#volumeIcon'); //alert variables

  var $alert = $('.alert'),
      $allow = $('#allow'),
      $decline = $('#decline');
  /**
   * Attempts to play sound on play load
   * On some browsers if 'soundAllowed' is set to true sound would play onLoad
   * If set to false sound will be muted onload
   */

  if (localStorage['soundAllowed'] !== undefined) {
    var isSoundAllowed = localStorage.getItem('soundAllowed');

    if (localStorage['soundAllowed'] === 'true') {
      $alert.remove();
      $audio.trigger('play');
      $audio.prop('volume', 0.25);
      $volumeIcon.attr('src', './images/sound.svg');
    } else {
      $alert.remove();
      $audio.trigger('pause');
      $audio.prop('volume', 0);
      $audio.prop('currentTime', '0');
      $volumeIcon.attr('src', './images/mute.svg');
    }
  } else {
    // $alert.remove()
    $audio.trigger('pause');
    $audio.prop('volume', 0);
    $audio.prop('currentTime', '0');
    $volumeIcon.attr('src', '');
  } // Allow sound to be played


  $allow.click(function () {
    localStorage.setItem('soundAllowed', 'true');
    $alert.remove();
    $audio.trigger('play');
    $audio.prop('volume', 0.25);
    $volumeIcon.attr('src', './images/sound.svg');
  }); // Disallowed sound to be played

  $decline.click(function () {
    localStorage.setItem('soundAllowed', 'false');
    $volumeIcon.attr('src', './images/mute.svg');
    $alert.remove();
  }); // Toggle Sound

  $volumeIcon.click(function () {
    if (localStorage['soundAllowed'] === 'true') {
      localStorage['soundAllowed'] = 'false';
      $volumeIcon.attr('src', './images/mute.svg');
      soundMute();
    } else if (localStorage['soundAllowed'] === 'false') {
      localStorage['soundAllowed'] = true;
      $volumeIcon.attr('src', './images/sound.svg');
      soundUnmute();
    }

    console.log('Is sound allowed', localStorage['soundAllowed']);
  }); // console.log('Is sound allowed: ', localStorage['soundAllowed'])
});
/**
  * Filename: dialogue.js
*/

var $dialogue = $('#npc'),
    $avatar = $('#avatar'),
    $chat = $('#chat'); // Populates NPC Dialogue Boxes

function dialogue(name, message) {
  var $this = $(this);
  $this.message = message;
  $this.name = name;

  if ($this.name === null) {
    $avatar.attr('src', '');
    $avatar.attr('alt', '');
  } else {
    var src = "images/" + $this.name.toLowerCase() + '.png';
    var alt = "Image of " + $this.name;
    $avatar.attr('src', src);
    $avatar.attr('alt', alt);
  }

  $chat.text($this.message);
  /**
   * #TODO: Find a resusable function that allows multiple
   *        newline and spoiler inserts
   */
  // New line and spoiler 

  $chat.html($chat.html().replace('[new]', '<br /><br />').replace('[spoiler]', '<span class="spoiler">').replace('[/spoiler]', '</span>'));
  dialogueShow();
  $('.spoiler').click(function () {
    $('.spoiler').toggleClass('spoiler');
  });
}

function dialogueShow() {
  $dialogue.show();
} // Removes text and images and rehides box.


function dialogueHide() {
  $chat.innerText = null;
  $avatar.attr('src', null);
  $avatar.attr('alt', null);
  $dialogue.hide();
}

$('#closeBox').click(function () {
  dialogueHide();
});
/**
  * Filename: locations.js
*/

function locationsLoad(name) {
  // Tests weather or not you are in existing page
  if (!(window.location.href.indexOf('404') > -1)) {
    /** Loads in map from the locations folder 
      * using ajax keeping it as a draggable 
      * object, if you are in an exsiting page. 
      * Making the "Player visibile"
    */
    $.ajaxSetup({
      cache: false
    });
    $routerContainer.css({
      opacity: '0'
    });
    $player.css({
      opacity: '0'
    });
    $routerContainer.load('./locations/' + name + '.html', function () {
      $routerContainer.stop().animate({
        opacity: '1'
      }, 800, 'swing');
      $player.stop().delay(800).css({
        opacity: '1'
      });
      navEvents();
      $('.map').draggable({
        addClasses: false
      }); // $('.interest-point').draggable({
      //   addClasses: false
      // })
    });
  } else {
    /**
      * Still loads in resource 
      * Makes "player" invisible
    */
    $.ajaxSetup({
      cache: false
    });
    $routerContainer.css({
      opacity: '0'
    });
    $player.css({
      opacity: '0'
    });
    $routerContainer.load('./locations/' + name + '.html', function () {
      $routerContainer.css({
        opacity: '1'
      });
      $player.stop().delay(0).css({
        opacity: '0'
      });
    });
  }
}
/**
  * Filename: navigation.js
*/


var $links = $('#links');
/** 
  * #TODO: Create and load navigations dynamically 
  *        based on current route
*/

function createNav(navItems) {} // Removes all the links from the navigation


function deleteNav() {
  $links.empty();
} // Function containing different event handlers


function navEvents() {
  // Toggles navigation
  $('#navMenu').on('click', function () {
    var $this = $(this);
    $this.toggleClass('active');
  }); // Closes navigation

  $('.nav--container').mouseleave(function () {
    if ($('.nav--menu').hasClass('active')) {
      $('.nav--menu').removeClass('active');
    }
  });
}
/**
  * Filename: newSound.js
*/

/**
  * #TODO: Add target parameter if deciding to add other sounds that play 
*/
// Plays new sound


function newSound(name) {
  // console.log("New Song name:", name)
  var src = "./audio/music/" + name + ".mp3"; // console.log("path: ", src)

  $audio.trigger("pause");
  $audio.prop("currentTime", "0");
  $audio.attr('src', src); // console.log(`Local Storage ${localStorage.getItem('soundAllowed')}`)
  // Plays new sound if 'soundAllowed' is set to true

  if (localStorage.getItem('soundAllowed') !== undefined || localStorage.getItem('soundAllowed') !== "false") {
    $audio.trigger('play');
  } else if (localStorage.getItem('soundAllowed') === "false") {}
}

function soundMute() {
  $audio.prop("volume", 0);
}

function soundUnmute() {
  $audio.prop("volume", 0.25);
  $audio.prop("currentTime", 0);
  $audio.trigger('play');
}
/**
  * Filename: playerMovement.js
*/


$(document).keydown(function (e) {
  var speed = 17,
      movement = 15;
  $map = $('.map'); // Only allow "player movement when in an existing page"

  if (!(window.location.href.indexOf("404") > -1)) {
    switch (e.which) {
      //move up
      case 38:
      case 87:
        // console.log(e.code + ' up')
        updatePosition(null, -1 * movement, speed, 'easeOutQuart');
        break;
      //move down

      case 40:
      case 83:
        // console.log(e.code + ' down')
        updatePosition(null, movement, speed, 'easeOutQuart');
        break;
      // move left

      case 37:
      case 65:
        // console.log(e.code + ' left')
        updatePosition(-1 * movement, null, speed, 'easeOutQuart');
        break;
      //move right

      case 39:
      case 68:
        updatePosition(movement, null, speed, 'easeOutQuart');
        break;
    }
  }
}); // Sets the position of an object

function setPosition(target, x, y) {
  var $this = $(this);
  $this.target = target;
  $this.posX = x;
  $this.posY = y;

  if ($this.posX != null && $this.posY != null) {
    // console.log("Position X", $this.posX)
    // console.log("Position Y", $this.posY)
    $this.target.css({
      'left': $this.posX + 'px',
      'top': $this.posY + 'px'
    });
  } else {
    console.warn("There is actually a null X or Y... Hopefully its intentional...");

    if ($this.posX != null) {
      $this.$this.target.css({
        'left': $this.posX + 'px'
      });
    } else {
      console.warn("X is returning null... Still hoping this is intentional");
    }

    if ($this.posY != null) {
      $this.target.css({
        'top': $this.posY + 'px'
      });
    } else {
      console.warn("Y is returning null... Still hoping this is intentional");
    }
  }
} // Updates players position
// Map is moved in the opposite direction of player


function updatePosition(x, y, dt, easing) {
  var $this = $(this);
  $this.moveX = x;
  $this.moveY = y;
  $this.offsetX = 5;
  $this.offsetY = 5;
  $this.dt = dt; // X Movement

  if ($this.moveX != null) {
    if ($this.moveX < 0) {
      $this.moveX *= -1; // Detects if player is getting out of the window in the left xPosition

      if ($player.position().left > 1) {
        $player.stop().animate({
          left: '-=' + $this.moveX + 'px'
        }, dt, easing);
      }

      $map.stop().animate({
        left: '+=' + ($this.moveX - $this.offsetX) + 'px'
      }, dt, easing);
    } else {
      if ($player.position().left < window.innerWidth / 2) {
        $player.stop().animate({
          left: '+=' + $this.moveX + 'px'
        }, dt, easing);
      }

      $map.stop().animate({
        left: '-=' + ($this.moveX - $this.offsetX) + 'px'
      }, dt, easing);
    }
  } // Y Movement


  if ($this.moveY != null) {
    if ($this.moveY < 0) {
      $this.moveY *= -1; // Detects if player is getting out of the window in the top yPosition

      if ($player.position().top > 1) {
        $player.stop().animate({
          top: '-=' + $this.moveY + 'px'
        }, dt, easing);
      }

      $map.stop().animate({
        top: '+=' + ($this.moveY - $this.offsetY) + 'px'
      }, dt, easing);
    } else {
      if ($player.position().top < window.innerHeight / 2) {
        $player.stop().animate({
          top: '+=' + $this.moveY + 'px'
        }, dt, easing);
      }

      $map.stop().animate({
        top: '-=' + ($this.moveY - $this.offsetY) + 'px'
      }, dt, easing);
    }
  }
}
/**
  * Filename: routes.js
*/


var root = null;
var useHash = true; // Defaults to: false

var hash = '#!'; // Defaults to: '#'

var router = new Navigo(root, useHash, hash);

function routes() {
  // Default Route
  router.on(function () {
    console.info('The Underground');
    locationsLoad('the-underground');
    newSound('start');
    setPosition($player, 62, 311);
    dialogueHide();
  }); // Route Doesn't Exist

  router.notFound(function (query) {
    console.info('404 page not found');
    locationsLoad('stay-determined');
    newSound('determination');
    router.navigate("/404");
    deleteNav();
    dialogueHide(); // Pressing any key returns to main page

    $(document).keydown(function (e) {
      if (window.location.href.indexOf("404") > -1) {
        setPosition($player, 62, 311);
        router.navigate("/");
      }
    });
  });
  /*
      #TODO: Find a way to incorparate JSON to run each of these functions
  */

  router.on({
    'ruins': function ruins() {
      console.info('Ruins');
      locationsLoad('ruins');
      newSound('ruins');
      setPosition($player, 680, 377);
      dialogue('Toriel', '* I am Toriel, caretaker of the Ruins...[new]' + '* I pass through this place every day to see if anyone has fallen down');
    },
    'ruins/spider-bake-sale': function ruinsSpiderBakeSale() {
      newSound('spiderdance');
      setPosition($player, 769.997, 89.216);
      setPosition($('.map'), -5636.79, -2723.9);
      dialogue('Muffet', '* The Spider Bake Sale is a small vendor and fundraising' + ' event found in the Ruins and Hotland.');
    },
    'snowdin': function snowdin() {
      console.info('Snowdin Forest');
      locationsLoad('snowdin');
      newSound('snowdin');
      setPosition($player, 264, 468);
      dialogue('Sans', '* Hey Bud, ya busy looking looking at a map of the Game Undertale? [new]' + '* Not that I care, but check out the game by Toby Fox.');
    },
    'snowdin/snowman': function snowdinSnowman() {
      setPosition($('.map'), -5634, -794);
      setPosition($player, 764, 300);
      dialogue('Snowman', '* I want to see the world, but can not move.[new]' + '[spoiler]Lets you take a piece to take faraway from there[/spoiler]');
    },
    'snowdin/grillbys': function snowdinGrillbys() {
      setPosition($('.map'), -21909, -2870);
      setPosition($player, 779, 345);
      dialogue('Sans', "I\'m going to Grillby's[new]" + '* Hey what is that next to you?');
    },
    'snowdin/grillbys2': function snowdinGrillbys2() {
      dialogue('Sans', '* Guess Its just a square...');
      setPosition($('.map'), -21909, -2870);
    },
    'snowdin/papyrus-sans-house': function snowdinPapyrusSansHouse() {
      setPosition($('.map'), -23827, -2885);
      setPosition($player, 779, 345);
      newSound('date-start');
      dialogue('papyrus', 'Papyrus house.[new]' + 'Technically Sans\' house too.');
    },
    'waterfall': function waterfall() {
      console.info('Waterfall');
      locationsLoad('waterfall');
      setPosition($player, 475, 365);
      newSound('waterfall');
      dialogueHide();
    },
    'waterfall/temmie': function waterfallTemmie() {
      console.info('Temmie');
      setPosition($('.map'), -14596, -5488);
      setPosition($player, 753, 375);
      newSound('temmie');
      dialogue('temmie', 'Temmie Village home to many Temmies, notable for their quirkiness and affected English speech. [new]' + '[spoiler]Help the shopkeeper pay for a collage education.[/spoiler]');
    },
    'hotland': function hotland() {
      console.info('Hotland');
      locationsLoad('hotland');
      setPosition($player, 258, 432);
      newSound('hotland');
      dialogue(null, 'Wow is it hot in here? The hotland is the path to the core[new]' + 'MTT Resort, Alphy\'s lab, among other things are located here.');
    },
    'hotland/alphy': function hotlandAlphy() {
      setPosition($player, 768, 369.246);
      setPosition($('.map'), -4758.97, -6658.56);
      newSound('alphys');
      dialogue('Alphys', "The Lab is the workplace and home of the royal scientist, Alphys, in Hotland. " + "It is a single building of technological prowess where Alphys conducts her studies.");
    },
    'the-core': function theCore() {
      console.info('The Core');
      locationsLoad('the-core');
      newSound('the-core');
      dialogue("sans", "Nothing to see here.");
    },
    'new-home': function newHome() {
      console.info('New Home');
      locationsLoad('new-home');
      newSound('his-theme');
      setPosition($player, 768, 369.246);
      setPosition($('.map'), 126, -1980);
      dialogue(null, "New Home is the new capital of the Underground, ruled by Asgore Dreemurr, " + "and the final location in the game before the protagonist reaches the barrier.");
    }
  }).resolve();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
